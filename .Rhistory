devtools::document()
library(mcdeR)
knitr::opts_chunk$set(echo = TRUE)
source("../R/GeneSets.R")
# read in the patient groups
shortlist = read.table("short_list.txt", sep="\t", stringsAsFactors=F)[,1]
# in this example we lump a bunch of patients together (the 'short survivors') and compare
#   them to another group (the 'long survivors')
protdata.enrichment.svl = enrichment_in_abundance(ncipid, protdata, abundance_column=shortlist, sample_comparison=longlist)
# read in the example abundance data
# A requirement is that the row names be gene symbols for use with the pathways file below
#   technically they just have to have the *same* identifiers, but practically I use gene symbols
protdata = read.table("OVCA_protein_combined.txt", sep="\t", row.names=1, header=1, stringsAsFactors=F)
# we have to update the colnames slightly to match what we have in the patient groups
colnames(protdata) = sapply(colnames(protdata), function (r) {
a=strsplit(r,"\\.");paste("TCGA",a[[1]][2], a[[1]][3], sep="-")})
# read in the pathways
ncipid = read_gene_sets("NCI_PID_genesymbol_corrected.gmt")
install.packages("readr")
library(mcdeR)
knitr::opts_chunk$set(echo = TRUE)
source("../R/GeneSets.R")
# read in the pathways
ncipid = read_gene_sets("NCI_PID_genesymbol_corrected.gmt")
library(readr)
# read in the pathways
ncipid = read_gene_sets("NCI_PID_genesymbol_corrected.gmt")
View(ncipid)
class(ncipid)
ncipid[[1]]
# read in the patient groups
shortlist = read.table("short_list.txt", sep="\t", stringsAsFactors=F)[,1]
longlist = read.table("long_list.txt", sep="\t", stringsAsFactors=F)[,1]
# in this example we lump a bunch of patients together (the 'short survivors') and compare
#   them to another group (the 'long survivors')
protdata.enrichment.svl = enrichment_in_abundance(ncipid, protdata, abundance_column=shortlist, sample_comparison=longlist)
# I generally output these files and then view them in Excel afterward
write.table(protdata.enrichment.svl, file="protdata.enrichment.svl.txt", sep="\t", quote=F)
# another application is to compare just one patient against another (this would be the
#     equivalent of comparing one time point to another)
protdata.enrichment.svl.ovo = enrichment_in_abundance(ncipid, protdata, abundance_column=shortlist[1], sample_comparison=longlist[1])
# for this example we will construct a list of genes from the expression data
#     to emulate what you might be inputting
genelist = rownames(protdata)[which(protdata[,1]>0.5)]
background = rownames(protdata)
prodata.enrichment.fishers = enrichment_in_groups(ncipid, targets=genelist,
background=background)
# in this example we construct some modules from the heirarchical clustering of the
#     data
protdata_naf = as.matrix(protdata)
# hierarchical clustering is not too happy with lots of missing values
#    so we'll do a zero fill on this to get the modules
protdata_naf[which(is.na(protdata_naf))] = 0
# construct the hierarchical clustering using the 'wardD' method, which
#    seems to give more even sized modules
protdata_hc = hclust(dist(protdata_naf), method="ward")
# arbitrarily we'll chop the clusters into 5 modules
modules = cutree(protdata_hc, k=5)
# To do enrichment for one module (module 1 in this case) do this
protdata.enrichment.fishers.module_1 = enrichment_in_groups(ncipid, targets=names(modules[which(modules==1)]),
background=names(modules))
for (i in 1:5) {
# step through each module
results = enrichment_in_groups(ncipid, targets=names(modules[which(modules==i)]),
background=names(modules))
fname = sprintf("protdata.enrichment.fishers.module_%d", i)
write.table(results, file=fname, sep="\t", quote=F)
}
