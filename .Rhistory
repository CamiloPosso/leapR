### 4. Pathway databases
Two 'databases' (organized text files) are included for pathways. The first is taken from the NCI's Pathway Interaction Database (PID) and covers signaling pathways in human - but is no longer being actively maintained. The second is taken from the MSIGDB (the same database used by GSEA) that has lots of different pathways gathered from multiple different sources- some are more useful than others. The MSIGDB is good for giving more options- but runs into multiple hypothesis correction issues (see above). They can be loaded as follows:
```
data(msigdb)
data(ncipid)
```
### 6. Example data
A sample data set is included that is from the CPTAC study of 169 ovarian tumors. For each application data is formatted to be an example of the type of analysis and also try to point out other ways you might use the approach (either in examples or as text). This data can be loaded as follows:
```
data(protdata)
data(transdata)
```
We also include some groups of patients to compare:
```
data(shortlist)
data(longlist)
```
library(leapr)
###using enrichment_wrapper function
protdata.enrichment.svl = leapR(geneset=ncipid,
enrichment_method='enrichment_comparison',
datamatrix=protdata, primary_columns=shortlist,
secondary_columns=longlist)
library(leapr)
source("R/leapR.R")
###using enrichment_wrapper function
protdata.enrichment.svl = leapR(geneset=ncipid,
enrichment_method='enrichment_comparison',
datamatrix=protdata, primary_columns=shortlist,
secondary_columns=longlist)
source("R/leapR.R")
result = leapr::enrichment_in_abundance(geneset=geneset, abundance=datamatrix, mapping_column=id_column,
abundance_column=primary_columns, sample_comparison=secondary_columns,
fdr=fdr, min_p_threshold=min_p_threshold, sample_n=sample_n)
roxygen2::roxygenise()
###using enrichment_wrapper function
protdata.enrichment.svl = leapR(geneset=ncipid,
enrichment_method='enrichment_comparison',
datamatrix=protdata, primary_columns=shortlist,
secondary_columns=longlist)
protdata.enrichment.svl
# in this example we lump a bunch of patients together (the 'short survivors') and compare
#   them to another group (the 'long survivors')
###using enrichment_wrapper function
protdata.enrichment.svl = leapR(geneset=ncipid,
enrichment_method='enrichment_comparison',
datamatrix=protdata, primary_columns=shortlist,
secondary_columns=longlist)
knitr::kable(protdata.enrichment.svl[order(protdata.enrichment.svl[,"pvalue"]),][1:10,])
# another application is to compare just one patient against another (this would be the
#     equivalent of comparing one time point to another)
###using enrichment_wrapper function
protdata.enrichment.svl.ovo = leapR(geneset=ncipid,
enrichment_method='enrichment_comparison',
datamatrix=protdata,
primary_columns=shortlist[1],
secondary_columns=longlist[1])
knitr::kable(protdata.enrichment.svl.ovo[order(protdata.enrichment.svl.ovo[,"pvalue"]),][1:10,])
# for this example we will construct a list of genes from the expression data
#     to emulate what you might be inputting
genelist = rownames(protdata)[which(protdata[,1]>0.5)]
background = rownames(protdata)
###using enrichment_wrapper function
protdata.enrichment.order = leapR(geneset=ncipid,
enrichment_method="enrichment_in_order",
datamatrix=protdata, threshold=.5,
primary_columns="TCGA-13-1484")
knitr::kable(protdata.enrichment.order[order(protdata.enrichment.order[,"pvalue"]),][1:10,])
# in this example we construct some modules from the hierarchical clustering of the
#     data
protdata_naf = as.matrix(protdata)
# hierarchical clustering is not too happy with lots of missing values
#    so we'll do a zero fill on this to get the modules
protdata_naf[which(is.na(protdata_naf))] = 0
# construct the hierarchical clustering using the 'wardD' method, which
#    seems to give more even sized modules
protdata_hc = hclust(dist(protdata_naf), method="ward.D2")
# arbitrarily we'll chop the clusters into 5 modules
modules = cutree(protdata_hc, k=5)
# modules is a named list of values where each value is a module
#         number and the name is the gene name
# To do enrichment for one module (module 1 in this case) do this
protdata.enrichment.sets.module_1 = leapR(geneset=ncipid, enrichment_method="enrichment_in_sets",
background=names(modules), targets=names(modules[which(modules==1)]))
# To do enrichment on all modules and return the list of enrichment results tables do this
protdata.enrichment.sets.modules = cluster_enrichment(geneset=ncipid, clusters=modules)
# for this example we will construct a list of genes from the expression data
#     to emulate what you might be inputting
genelist = rownames(protdata)[which(protdata[,1]>0.5)]
# for this example we will construct a list of genes from the expression data
#     to emulate what you might be inputting
genelist = rownames(protdata)[which(protdata[,1]>0.5)]
background = rownames(protdata)
###using enrichment_wrapper function
protdata.enrichment.order = leapR(geneset=ncipid,
enrichment_method="enrichment_in_order",
datamatrix=protdata, threshold=.5,
primary_columns="TCGA-13-1484")
knitr::kable(protdata.enrichment.order[order(protdata.enrichment.order[,"pvalue"]),][1:10,])
# in this example we construct some modules from the hierarchical clustering of the
#     data
protdata_naf = as.matrix(protdata)
# hierarchical clustering is not too happy with lots of missing values
#    so we'll do a zero fill on this to get the modules
protdata_naf[which(is.na(protdata_naf))] = 0
# construct the hierarchical clustering using the 'wardD' method, which
#    seems to give more even sized modules
protdata_hc = hclust(dist(protdata_naf), method="ward.D2")
# arbitrarily we'll chop the clusters into 5 modules
modules = cutree(protdata_hc, k=5)
# modules is a named list of values where each value is a module
#         number and the name is the gene name
# To do enrichment for one module (module 1 in this case) do this
protdata.enrichment.sets.module_1 = leapR(geneset=ncipid, enrichment_method="enrichment_in_sets",
background=names(modules), targets=names(modules[which(modules==1)]))
# To do enrichment on all modules and return the list of enrichment results tables do this
protdata.enrichment.sets.modules = cluster_enrichment(geneset=ncipid, clusters=modules)
# This is how you calculate enrichment in a ranked list (for example from topology)
###using enrichment_wrapper function
protdata.enrichment.sets = leapR(geneset=ncipid, "enrichment_in_sets",
datamatrix=protdata,
primary_columns=shortlist[1])
# This is how you calculate enrichment in a ranked list (for example from topology)
###using enrichment_wrapper function
protdata.enrichment.sets = leapR(geneset=ncipid, "enrichment_in_order",
datamatrix=protdata,
primary_columns=shortlist[1])
knitr::kable(protdata.enrichment.sets[order(protdata.enrichment.sets[,"pvalue"]),][1:10,])
###using enrichment_wrapper function
protdata.enrichment.correlation = leapR(geneset=ncipid,
enrichment_method = "correlation_enrichment",
datamatrix=protdata)
knitr::kable(head(protdata.enrichment.correlation[order(protdata.enrichment.correlation[,"pvalue"]),]))
protdata.enrichment.correlation.short = leapR(geneset=ncipid,
enrichment_method = "correlation_enrichment",
datamatrix=protdata[,shortlist])
knitr::kable(head(protdata.enrichment.correlation.short[order(protdata.enrichment.correlation.short[,"pvalue"]),]))
protdata.enrichment.correlation.long = leapR(geneset=ncipid,
enrichment_method = "correlation_enrichment",
datamatrix=protdata[,longlist])
knitr::kable(head(protdata.enrichment.correlation.long[order(protdata.enrichment.correlation.long[,"pvalue"]),]))
roxygen2::roxygenise()
protdatat[1:5,1:5]
protdata[1:5,1:5]
hist(protdata[,1])
library(leapr)
detach("package:leapr", unload = TRUE)
devtools::install_github("biodataganache/leapR",build_vignette=TRUE)
roxygen2::roxygenise()
devtools::install_github("biodataganache/leapR",build_vignette=TRUE)
roxygen2::roxygenise()
devtools::install_github("biodataganache/leapR",build_vignette=TRUE)
library(leapr)
# in this example we lump a bunch of patients together (the 'short survivors') and compare
#   them to another group (the 'long survivors')
###using enrichment_wrapper function
protdata.enrichment.svl = leapR(geneset=ncipid,
enrichment_method='enrichment_comparison',
datamatrix=protdata, primary_columns=shortlist,
secondary_columns=longlist)
knitr::kable(protdata.enrichment.svl[order(protdata.enrichment.svl[,"pvalue"]),][1:10,])
# another application is to compare just one patient against another (this would be the
#     equivalent of comparing one time point to another)
###using enrichment_wrapper function
protdata.enrichment.svl.ovo = leapR(geneset=ncipid,
enrichment_method='enrichment_comparison',
datamatrix=protdata,
primary_columns=shortlist[1],
secondary_columns=longlist[1])
knitr::kable(protdata.enrichment.svl.ovo[order(protdata.enrichment.svl.ovo[,"pvalue"]),][1:10,])
unlink('vignettes/leapr_cache', recursive = TRUE)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(leapr)
# in this example we lump a bunch of patients together (the 'short survivors') and compare
#   them to another group (the 'long survivors')
###using enrichment_wrapper function
protdata.enrichment.svl = leapR(geneset=ncipid,
enrichment_method='enrichment_comparison',
datamatrix=protdata, primary_columns=shortlist,
secondary_columns=longlist)
knitr::kable(protdata.enrichment.svl[order(protdata.enrichment.svl[,"pvalue"]),][1:10,])
# another application is to compare just one patient against another (this would be the
#     equivalent of comparing one time point to another)
###using enrichment_wrapper function
protdata.enrichment.svl.ovo = leapR(geneset=ncipid,
enrichment_method='enrichment_comparison',
datamatrix=protdata,
primary_columns=shortlist[1],
secondary_columns=longlist[1])
knitr::kable(protdata.enrichment.svl.ovo[order(protdata.enrichment.svl.ovo[,"pvalue"]),][1:10,])
# for this example we will construct a list of genes from the expression data
#     to emulate what you might be inputting
genelist = rownames(protdata)[which(protdata[,1]>0.5)]
background = rownames(protdata)
###using enrichment_wrapper function
protdata.enrichment.order = leapR(geneset=ncipid,
enrichment_method="enrichment_in_order",
datamatrix=protdata, threshold=.5,
primary_columns="TCGA-13-1484")
knitr::kable(protdata.enrichment.order[order(protdata.enrichment.order[,"pvalue"]),][1:10,])
# in this example we construct some modules from the hierarchical clustering of the
#     data
protdata_naf = as.matrix(protdata)
# hierarchical clustering is not too happy with lots of missing values
#    so we'll do a zero fill on this to get the modules
protdata_naf[which(is.na(protdata_naf))] = 0
# construct the hierarchical clustering using the 'wardD' method, which
#    seems to give more even sized modules
protdata_hc = hclust(dist(protdata_naf), method="ward.D2")
# arbitrarily we'll chop the clusters into 5 modules
modules = cutree(protdata_hc, k=5)
# modules is a named list of values where each value is a module
#         number and the name is the gene name
# To do enrichment for one module (module 1 in this case) do this
protdata.enrichment.sets.module_1 = leapR(geneset=ncipid, enrichment_method="enrichment_in_sets",
background=names(modules), targets=names(modules[which(modules==1)]))
# To do enrichment on all modules and return the list of enrichment results tables do this
protdata.enrichment.sets.modules = cluster_enrichment(geneset=ncipid, clusters=modules)
# This is how you calculate enrichment in a ranked list (for example from topology)
###using enrichment_wrapper function
protdata.enrichment.sets = leapR(geneset=ncipid, "enrichment_in_order",
datamatrix=protdata,
primary_columns=shortlist[1])
knitr::kable(protdata.enrichment.sets[order(protdata.enrichment.sets[,"pvalue"]),][1:10,])
###using enrichment_wrapper function
protdata.enrichment.correlation = leapR(geneset=ncipid,
enrichment_method = "correlation_enrichment",
datamatrix=protdata)
